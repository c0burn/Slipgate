/*QUAKED path_corner (0.5 0.3 0) (-8 -8 -8) (8 8 8) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
If a monster targets a path_corner, they will move towards it.
Once a monster hits a path_corner, they will move to the next targeted path_corner.
You can set "pausetime" on a path_corner to enforce a delay before the monster moves
to the next target.
*/
/*QUAKED item_health (0 0 1) (0 0 0) (32 32 56) Rotten Megahealth X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ( {{ spawnflags & 1 -> { "path" : "maps/b_bh10.bsp" }, spawnflags & 2 -> { "path" : "maps/b_bh100.bsp" },
	 "maps/b_bh25.bsp" }} );
}
Health box. Normally gives 25 points.
Rotten box heals 15 points.
Megahealth will add 100 health, then start to
rot the player back down to 100 health after 5 seconds.
*/
/*QUAKED item_armor1 (0 0 1) (-16 -16 0) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path" : "progs/armor.mdl", "skin" : 0});
}
Green armor. 100 points, saves 30% of damage.
*/
/*QUAKED item_armor2 (0 0 1) (-16 -16 0) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path" : "progs/armor.mdl", "skin" : 1});
}
Yellow armor. 150 points, saves 60% of damage.
*/
/*QUAKED item_armorInv (0 0 1) (-16 -16 0) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path" : "progs/armor.mdl", "skin" : 2});
}
Red armor. 200 points, saves 80% of damage.
*/
/*QUAKED item_key1 (0 0 1) (-16 -16 -24) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/key_med.mdl");	}
SILVER key
In order for keys to work
you MUST set your maps
worldtype to one of the
following:
0: medieval
1: metal
2: base
*/
/*QUAKED item_key2 (0 0 1) (-16 -16 -24) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path" : "progs/key_med.mdl", "skin" : 1});
}
GOLD key
In order for keys to work
you MUST set your maps
worldtype to one of the
following:
0: medieval
1: metal
2: base
*/
/*QUAKED item_sigil (0 0 1) (-16 -16 -24) (16 16 32) E1 E2 E3 E4 X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ( {{ spawnflags & 1 -> { "path" : "progs/end1.mdl" }, spawnflags & 2 -> { "path" : "progs/end2.mdl" },
	spawnflags & 4 -> { "path" : "progs/end3.mdl" }, spawnflags & 8 -> { "path" : "progs/end4.mdl" },
	 "progs/end1.mdl" }} );
}
End of episode rune. Use in conjuction with func_bossgate and func_episodegate.
Spawnflag must be set to the appropriate episode.
Episode 1 - Dimension of the Doomed - Rune of Earth Magic
Episode 2 - The Realm of Black Magic - Rune of Black Magic
Episode 3 - The Netherworld - Rune of Hell Magic
Episode 4 - The Elder World - Run of Elder Magic
*/
/*QUAKED item_artifact_invulnerability (0 0 1) (-16 -16 -24) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/invulner.mdl");	}
Pentagram of Protection
Player is invulnerable for 30 seconds
*/
/*QUAKED item_artifact_envirosuit (0 0 1) (-16 -16 -24) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/suit.mdl");	}
Biosuit
Player takes no damage from water or slime for 30 seconds
*/
/*QUAKED item_artifact_invisibility (0 0 1) (-16 -16 -24) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/invisibl.mdl");	}
Ring of Shadows
Player is invisible for 30 seconds
*/
/*QUAKED item_artifact_super_damage (0 0 1) (-16 -16 -24) (16 16 32) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/quaddama.mdl");	}
Quad Damage
Player does 4x damage for 30 seconds
*/
/*QUAKED item_shells (0 0 1) (0 0 0) (32 32 56) AMMO_BIG X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ( {{ spawnflags & 1 -> { "path" : "maps/b_shell1.bsp" }, "maps/b_shell0.bsp" }} );
}
Nox of 20 shells.
AMMO_BIG is a box of 40 shells.
*/
/*QUAKED item_spikes (0 0 1) (0 0 0) (32 32 56) AMMO_BIG X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ( {{ spawnflags & 1 -> { "path" : "maps/b_nail1.bsp" }, "maps/b_nail0.bsp" }} );
}
Nox of 25 nails.
AMMO_BIG is a box of 50 nails.
*/
/*QUAKED item_rockets (0 0 1) (0 0 0) (32 32 56) AMMO_BIG X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ( {{ spawnflags & 1 -> { "path" : "maps/b_rock1.bsp" }, "maps/b_rock0.bsp" }} );
}
Nox of 5 rockets.
AMMO_BIG is a box of 10 rockets.
*/
/*QUAKED item_cells (0 0 1) (0 0 0) (32 32 56) AMMO_BIG X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ( {{ spawnflags & 1 -> { "path" : "maps/b_batt1.bsp" }, "maps/b_batt0.bsp" }} );
}
Nox of 6 cells.
AMMO_BIG is a box of 12 cells.
*/
/*QUAKED weapon_supershotgun (0 0 1) (-16 -16 0) (16 16 56) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/g_shot.mdl");	}
Double-barrelled Shotgun
*/
/*QUAKED weapon_nailgun (0 0 1) (-16 -16 0) (16 16 56) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/g_nail.mdl");	}
Nailgun
*/
/*QUAKED weapon_supernailgun (0 0 1) (-16 -16 0) (16 16 56) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/g_nail2.mdl");	}
Perforator
*/
/*QUAKED weapon_grenadelauncher (0 0 1) (-16 -16 0) (16 16 56) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/g_rock.mdl");	}
Grenade Launcher
*/
/*QUAKED weapon_rocketlauncher (0 0 1) (-16 -16 0) (16 16 56) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/g_rock2.mdl");	}
Rocket Launcher
*/
/*QUAKED weapon_lightning (0 0 1) (-16 -16 0) (16 16 56) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/g_light.mdl");	}
Thunderbolt
*/
/*QUAKED item_backback (0 0 1) (-16 -16 0) (16 16 56) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/backpack.mdl");	}
Backpack pickup. Contains 40 shells, 50 nails, 10 rockets and 12 cells.

Keys:
items: set to one of the IT_SHOTGUN etc values to make the backpack contain a (single) weapon
ammo_shells, ammo_nails, ammo_rockets, ammo_cells - set to override defaults. set to -1 to not give ammo of that type.
*/
/*QUAKED ambient_custom (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Customisable ambient sound.

Keys:
"noise" "name" - Ambient sound to play. Must have loop markers.
"volume" "n" - Set the volume of the sound. Range 0-1. Defaulf 0.5.
"distance" "n" - Set the attenuation of the ambient sound.
0 - static (default, usual for ambient sounds)
1 - idle (usually used for monster idle sounds)
2 - normal (normal attenuation)
3 - none (no attenuation, audible throughout entire map)
*/
/*QUAKED ambient_comp_hum (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient computer hum.
*/
/*QUAKED ambient_drip (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient water drip.
*/
/*QUAKED ambient_drone (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient drone.
*/
/*QUAKED ambient_fire (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient fire crackling.
*/
/*QUAKED ambient_flouro_buzz (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient flourescent light buzzing.
*/
/*QUAKED ambient_light_buzz (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient light buzz.
*/
/*QUAKED ambient_suck_wind (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient sucking wind.
*/
/*QUAKED ambient_swamp1 (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient swamp - 1st variation.
*/
/*QUAKED ambient_swamp2 (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient swamp - 2nd variation.
*/
/*QUAKED ambient_teleport (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient teleporter hum.
*/
/*QUAKED ambient_thunder (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient thunder.
*/
/*QUAKED ambient_water (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient water.
*/
/*QUAKED ambient_wind (0.3 0.1 0.6) (-8 -8 -8) (8 8 8)
Ambient wind.
*/
/*QUAKED info_null (.5 .5 .5) (-8 -8 -8) (8 8 8)
Used as a positional target for spotlights, etc.
*/
/*QUAKED info_intermission (1 0.5 0.5) (-8 -8 -8) (8 8 8)
This is the camera point for the intermission.
Use mangle instead of angle, so you can set pitch and roll as well as yaw.
*/
/*QUAKED info_player_start (0 .5 0) (-16 -16 -24) (16 16 32)
{
	model ({"path" : "progs/player.mdl", "frame" : 12});
}
The normal starting point for a level.
*/
/*QUAKED info_player_start2 (0 .5 0) (-16 -16 -24) (16 16 32)
{
	model ({"path" : "progs/player.mdl", "frame" : 12});
}
Only used on start map for the return point from an episode.
*/
/*QUAKED info_player_test (0 .5 0) (-16 -16 -24) (16 16 32)
{
	model ({"path" : "progs/player.mdl", "frame" : 12});
}
For debugging. If developer mode is active, player will always spawn here.
*/
/*QUAKED info_player_deathmatch (0 .5 0) (-16 -16 -24) (16 16 32)
{
	model ({"path" : "progs/player.mdl", "frame" : 12});
}
Potential spawning position for deathmatch games.
*/
/*QUAKED info_player_coop (0 .5 0) (-16 -16 -24) (16 16 32)
{
	model ({"path" : "progs/player.mdl", "frame" : 12});
}
Potential spawning position for coop games.
*/
/*QUAKED info_teleport_destination (.5 .5 .5) (-16 -16 0) (16 16 56)
This is the destination marker for a teleporter.
It should have a "targetname" field with the same value as a teleporter's "target" field.
*/
/*QUAKED func_wall (0 .5 .8) ? X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
Simple solid bmodel

Keys:
"targetname" "name"
if triggered, the bmodel will toggle its frame/animation sequence from +0 -> +9 to +a -> +j
*/
/*QUAKED func_illusionary (0 .5 .8) ? X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
A simple bmodel that looks solid but lets the player walk through it

Keys:
"targetname" "name"
if triggered, the bmodel will toggle its frame/animation sequence from +0 -> +9 to +a -> +j
*/
/*QUAKED func_episodegate (0 .5 .8) ? E1 E2 E3 E4 X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
This bmodel will only appear if the episode has already been completed.

Keys:
"targetname" "name"
if triggered, the bmodel will toggle its frame/animation sequence from +0 -> +9 to +a -> +j

Spawnflags:
E1, E2, E3, E4
*/
/*QUAKED func_bossgate (0 .5 .8) ? X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
This bmodel appears unless the player has all of the episode runes.

Keys:
"targetname" "name"
if triggered, the bmodel will toggle its frame/animation sequence from +0 -> +9 to +a -> +j
*/
/*QUAKED light (1 1 0) (-8 -8 -8) (8 8 8) START_OFF FADE_IN_OUT
Non-displayed light
Please see your compiling utility documentation for full details,
this entry only describes things controlled by the game code

==========
Keys
==========
"targetname" "name"
Turns the light into a switchable light. You must target it to toggle it.

"speed" "n"
If the light is switchable and FADE_IN_OUT is set, the speed at which the light transitions from off to on and vice versa. Default 0.1.

"style" "n"
Set the animated light style. Default 0.
0 NORMAL
1 FLICKER (first variety)
2 SLOW STRONG PULSE
3 CANDLE (first variety)
4 FAST STROBE
5 GENTLE PULSE 1
6 FLICKER (second variety)
7 CANDLE (second variety)
8 CANDLE (third variety)
9 SLOW STROBE (fourth variety)
10 FLUORESCENT FLICKER
11 SLOW PULSE NOT FADE TO BLACK
12 BLINK OFF / ON (can be synced with animated textures, e.g. +0light, +1light, +alight)

"style2" "n"
Set the animated light style for a switchable light.
This is because "style" will be set by your compiling utility to a value in the range 32+,
so we need to tell the QuakeC what actual style to use.

==========
Spawnflags
==========
START_OFF - switchable lights only - light is switched off at map start - default is on
FADE_IN_OUT - switchable lights only - light fades in and out when switched. you can't combine this with an animated style.
*/
/*QUAKED light_fluoro (1 1 0) (-8 -8 -8) (8 8 8)
Non-displayed light
Makes steady fluorescent humming sound
*/
/*QUAKED light_fluorospark (1 1 0) (-8 -8 -8) (8 8 8)
Non-displayed light
Makes sparking, broken fluorescent sound
*/
/*QUAKED light_globe (1 1 0) (-8 -8 -8) (8 8 8)
Sprite globe light
*/
/*QUAKED light_torch_small_walltorch (1 1 0) (-4 -4 -16) (4 4 32) NO_SOUND
{	model ("progs/flame.mdl");	}
Short wall torch
Makes crackling fire noise unless NO_SOUND is set
*/
/*QUAKED light_torch_long_walltorch (1 1 0) (-8 -8 -48) (8 8 24) NO_SOUND
{	model ("progs/flame3.mdl");	}
Long wall torch
Makes crackling fire noise unless NO_SOUND is set
*/
/*QUAKED light_flame_small_yellow (1 1 0) (-4 -4 -12) (4 4 16) NO_SOUND
{	model ("progs/flame2.mdl");	}
Small yellow flame
Makes crackling fire noise unless NO_SOUND is set
*/
/*QUAKED light_flame_large_yellow (1 1 0) (-8 -8 -12) (8 8 40) NO_SOUND
{	model ( { "path" : "progs/flame2.mdl", "frame" : 1 } );	}
Large yellow flame
Makes crackling fire noise unless NO_SOUND is set
*/
/*QUAKED light_flame_sprite (1 1 0) (-16 -16 0) (16 16 40) NO_SOUND
Large yellow flame sprite
Makes crackling fire noise unless NO_SOUND is set
*/
/*QUAKED misc_model (0 0 1) (-16 -16 -16) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path" : mdl, "skin" : skin, "frame": frame});
}
Custom map object. Non-solid by default.

"mdl" "name" - model to load, e.g. "progs/grenade.mdl". Will also work on .bsp and .spr
"pos1", "pos2" "vector" - bounding box size. if not defined it will default to '-16 -16 -16' , '16 16 16'
"skin" "n" - model or sprite skin
"frame" "n" - model or sprite frame

==========
Spawnflags
==========
1 - Object is solid
*/
/*QUAKED misc_demon_dead (1 0 0) (-32 -32 -24) (32 32 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/demon.mdl","frame":53});
}
Dead Fiend
*/
/*QUAKED misc_demon_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_demon.mdl");
}
Fiend Head
*/
/*QUAKED misc_dog_dead_1 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/dog.mdl","frame":16});
}
Dead dog
*/
/*QUAKED misc_dog_dead_2 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/dog.mdl","frame":25});
}
Dead dog
*/
/*QUAKED misc_dog_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_dog.mdl");
}
dog Head
*/
/*QUAKED misc_enforcer_dead_1 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/enforcer.mdl","frame":54});
}
Dead Enforcer
*/
/*QUAKED misc_enforcer_dead_2 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/enforcer.mdl","frame":65});
}
Dead Enforcer
*/
/*QUAKED misc_enforcer_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_mega.mdl");
}
Enforcer Head
*/
/*QUAKED misc_fish_dead (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/fish.mdl","frame":38});
}
Dead Fish
*/
/*QUAKED misc_hknight_dead_1 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/hknight.mdl","frame":53});
}
Dead Death Knight
*/
/*QUAKED misc_hknight_dead_2 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/hknight.mdl","frame":62});
}
Dead Death Knight
*/
/*QUAKED misc_hknight_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_hellkn.mdl");
}
Death Knight Head
*/
/*QUAKED misc_knight_dead_1 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/knight.mdl","frame":85});
}
Dead Knight
*/
/*QUAKED misc_knight_dead_2 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/knight.mdl","frame":96});
}
Dead Knight
*/
/*QUAKED misc_knight_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_knight.mdl");
}
Knight Head
*/
/*QUAKED misc_ogre_dead_1 (1 0 0) (-32 -32 -24) (32 32 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/ogre.mdl","frame":125});
}
Dead Ogre
*/
/*QUAKED misc_ogre_dead_2 (1 0 0) (-32 -32 -24) (32 32 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/ogre.mdl","frame":135});
}
Dead Ogre
*/
/*QUAKED misc_ogre_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_ogre.mdl");
}
Ogre Head
*/
/*QUAKED misc_shalrath_dead (1 0 0) (-32 -32 -24) (32 32 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/shalrath.mdl","frame":22});
}
Dead Vore
*/
/*QUAKED misc_shalrath_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_shal.mdl");
}
Vore Head
*/
/*QUAKED misc_shambler_dead (1 0 0) (-32 -32 -24) (32 32 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/shambler.mdl","frame":93});
}
Dead Shambler
*/
/*QUAKED misc_shambler_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_shams.mdl");
}
Shambler Head
*/
/*QUAKED misc_soldier_dead_1 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/soldier.mdl","frame":28});
}
Dead Grunt
*/
/*QUAKED misc_soldier_dead_2 (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/soldier.mdl","frame":28});
}
Dead Grunt
*/
/*QUAKED misc_soldier_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_guard.mdl");
}
Grunt Head
*/
/*QUAKED misc_wizard_dead (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/wizard.mdl","frame":53});
}
Dead Scrag
*/
/*QUAKED misc_wizard_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_wizard.mdl");
}
Scrag Head
*/
/*QUAKED misc_zombie_dead (1 0 0) (-16 -16 -24) (16 16 0) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ({"path":"progs/zombie.mdl","frame":172});
}
Dead Zombie
*/
/*QUAKED misc_zombie_head (1 0 0) (-16 -16 0) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{
	model ("progs/h_zombie.mdl");
}
Zombie Head
*/
/*QUAKED air_bubbles (0 .5 .8) (-8 -8 -8) (8 8 8)

testing air bubbles
*/
/*QUAKED misc_fireball (1 .5 0) (-8 -8 -8) (8 8 8)
{	model ("progs/lavaball.mdl");	}
Flying lava balls

Keys:
speed - set vertical speed of fireballs. default 1000.
wait - delay between fireballs (with some randomness). default 3 seconds.
count - number of fireballs to launch. default 1.
dmg - damage dealt by fireballs. default 20.
*/
/*QUAKED misc_explobox (1 .5 0) (0 0 0) (32 32 64)
{
	model("maps/b_explob.bsp");
}
Explosive box
*/
/*QUAKED misc_explobox2 (1 .5 0) (0 0 0) (32 32 32)
{
	model("maps/b_exbox2.bsp");
}
Smaller explosive box
*/
/*QUAKED trap_spikeshooter (1 .5 0) (-8 -8 -8) (8 8 8) superspike laser
When triggered, fires a spike in the direction set in QuakeEd.
Laser is only for REGISTERED.
*/
/*QUAKED trap_shooter (1 .5 0) (-8 -8 -8) (8 8 8) superspike laser
Continuously fires spikes.
"wait" time between spike (1.0 default)
"nextthink" delay before firing first spike, so multiple shooters can be stagered.
*/
/*QUAKED worldspawn (0 0 0) ?
The world entity.

Keys:
"message" "name" - Map name
"sounds" "n" - CD / Music track to play
"worldtype" "n":
0 - medieval, 1 - metal, 2 - base
*/
/*QUAKED trigger_changelevel (0.5 0.5 0.5) ? NO_INTERMISSION
When the player touches this, he gets sent to the map listed in the "map" key.
Unless the NO_INTERMISSION flag is set, the view will go to the info_intermission spot and display stats.
*/
/*QUAKED func_breakable (0 .5 .8) ? EXPLODE NO_EXPLOSION_SPRITE NO_EXPLOSION_SOUND SPAWN_SMOKE X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
Breakable brush model

Spawnflags:
EXPLODE - will explode upon destruction. Set the dmg key to the force of the explosion.
You can set dmg to 0 for just the explosion effects.
NO_EXPLOSION_SPRITE - don't show explosion sprite.
NO_EXPLOSION_SOUND - don't make explosion sound or light.
SPAWN_SMOKE - will spawn some additional smoke upon destuction

Keys:
"style" "n"
Preset style, 1=base crates, 2=stone/brick
Sets debris model, particle color and sounds automatically
If mdl1-3, noise or colour are set they will override the preset

"mdl1", "mdl2", "mdl3" "name"
custom models for debris chunks

"color" "n"
particle color for damage, range 0-254 (from palette)

"noise1", "noise2" "name"
custom sound for break / damage

"health" "n"
damage required to destroy. default 30.

"targetname" "name"
if set, the breakable must be triggered to destroy it

"count" "n"
number of pieces of debris to spawn. default 8.

"angle" "n"
If set, overrides the direction debris moves in. Use -1 and -2 for up/down. Use 360 for a yaw of 0.

"dmg" "n"
Amount of explosive damage to deal. Default 60.
*/
/*QUAKED func_door (0 .5 .8) ? START_OPEN x DOOR_DONT_LINK GOLD_KEY SILVER_KEY TOGGLE
if two doors touch, they are assumed to be connected and operate as a unit.

TOGGLE causes the door to wait in both the start and end states for a trigger event.

START_OPEN causes the door to move to its destination when spawned, and operate in reverse.  It is used to temporarily or permanently close off an area when triggered (not usefull for touch or takedamage doors).

Key doors are allways wait -1.

"message"	is printed when the door is touched if it is a trigger door and it hasn't been fired yet
"angle"		determines the opening direction
"targetname" if set, no touch field will be spawned and a remote button or trigger field activates the door.
"health"	if set, door must be shot open
"speed"		movement speed (100 default)
"wait"		wait before returning (3 default, -1 = never return)
"lip"		lip remaining at end of move (8 default)
"dmg"		damage to inflict when blocked (2 default)
"sounds"
0)	no sound
1)	stone
2)	base
3)	stone chain
4)	screechy metal
*/
/*QUAKED func_door_secret (0 .5 .8) ? open_once 1st_left 1st_down no_shoot always_shoot
Basic secret door. Slides back, then to the side. Angle determines direction.
wait  = # of seconds before coming back
1st_left = 1st move is left of arrow
1st_down = 1st move is down from arrow
always_shoot = even if targeted, keep shootable
t_width = override WIDTH to move back (or height if going down)
t_length = override LENGTH to move sideways
"dmg"		damage to inflict when blocked (2 default)

If a secret door has a targetname, it will only be opened by it's botton or trigger, not by damage.
"sounds"
1) medieval
2) metal
3) base
*/
/*QUAKED func_button (0 .5 .8) ?
When a button is touched, it moves some distance in the direction of it's angle, triggers all of it's targets, waits some time, then returns to it's original position where it can be triggered again.

"angle"		determines the opening direction
"target"	all entities with a matching targetname will be used
"speed"		override the default 40 speed
"wait"		override the default 1 second wait (-1 = never return)
"lip"		override the default 4 pixel lip remaining at end of move
"health"	if set, the button must be killed instead of touched
"sounds"
0) steam metal
1) wooden clunk
2) metallic click
3) in-out
*/
/*QUAKED trigger_multiple (.5 .5 .5) ? notouch
Variable sized repeatable trigger.  Must be targeted at one or more entities.  If "health" is set, the trigger must be killed to activate each time.
If "delay" is set, the trigger waits some time after activating before firing.
"wait" : Seconds between triggerings. (.2 default)
If notouch is set, the trigger is only fired by other entities, not by touching.
NOTOUCH has been obsoleted by trigger_relay!
sounds
1)	secret
2)	beep beep
3)	large switch
4)
set "message" to text string
*/
/*QUAKED trigger_once (.5 .5 .5) ? notouch
Variable sized trigger. Triggers once, then removes itself.  You must set the key "target" to the name of another object in the level that has a matching
"targetname".  If "health" is set, the trigger must be killed to activate.
If notouch is set, the trigger is only fired by other entities, not by touching.
if "killtarget" is set, any objects that have a matching "target" will be removed when the trigger is fired.
if "angle" is set, the trigger will only fire when someone is facing the direction of the angle.  Use "360" for an angle of 0.
sounds
1)	secret
2)	beep beep
3)	large switch
4)
set "message" to text string
*/
/*QUAKED trigger_relay (.5 .5 .5) (-8 -8 -8) (8 8 8)
This fixed size trigger cannot be touched, it can only be fired by other events.  It can contain killtargets, targets, delays, and messages.
*/
/*QUAKED trigger_secret (.5 .5 .5) ?
secret counter trigger
sounds
1)	secret
2)	beep beep
3)
4)
set "message" to text string
*/
/*QUAKED trigger_counter (.5 .5 .5) ? nomessage
Acts as an intermediary for an action that takes multiple inputs.

If nomessage is not set, t will print "1 more.. " etc when triggered and "sequence complete" when finished.

After the counter has been triggered "count" times (default 2), it will fire all of it's targets and remove itself.
*/
/*QUAKED trigger_teleport (.5 .5 .5) ? PLAYER_ONLY SILENT
Any object touching this will be transported to the corresponding info_teleport_destination entity. You must set the "target" field, and create an object with a "targetname" field that matches.

If the trigger_teleport has a targetname, it will only teleport entities when it has been fired.
*/
/*QUAKED trigger_setskill (.5 .5 .5) ?
sets skill level to the value of "message".
Only used on start map.
*/
/*QUAKED trigger_onlyregistered (.5 .5 .5) ?
Only fires if playing the registered version, otherwise prints the message
*/
/*QUAKED trigger_hurt (.5 .5 .5) ?
Any object touching this will be hurt
set dmg to damage amount
defalt dmg = 5
*/
/*QUAKED trigger_push (.5 .5 .5) ? PUSH_ONCE
Pushes the player
*/
/*QUAKED trigger_monsterjump (.5 .5 .5) ?
Walking monsters that touch this will jump in the direction of the trigger's angle
"speed" default to 200, the speed thrown forward
"height" default to 200, the speed thrown upwards
*/
/*QUAKED trigger_ladder (.5 .5 .5) ?
Invisible ladder trigger.
When the player is touching this entity, he can climb by holding jump.
If "angle" is set, the player must face that direction to climb the ladder.
*/
/*QUAKED func_plat (0 .5 .8) ? PLAT_LOW_TRIGGER
speed	default 150

Plats are always drawn in the extended position, so they will light correctly.

If the plat is the target of another trigger or button, it will start out disabled in the extended position until it is trigger, when it will lower and become a normal plat.

If the "height" key is set, that will determine the amount the plat moves, instead of being implicitly determined by the model's height.
Set "sounds" to one of the following:
1) base fast
2) chain slow
*/
/*QUAKED func_train (0 .5 .8) ?
Trains are moving platforms that players can ride.
The targets origin specifies the min point of the train at each corner.
The train spawns at the first target it is pointing at.
If the train is the target of a button or trigger, it will not begin moving until activated.
speed	default 100
dmg		default	2
sounds
1) ratchet metal

*/
/*QUAKED misc_teleporttrain (.5 .5 .5) (-16 -16 -16) (16 16 16) X X X X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD NOT_IN_DM
{	model("progs/teleport.mdl");	}

Teleporter target for final boss level. Must target a series of 'path_corner' entities.
If a targetname is set, must be triggered to start moving.
*/
/*QUAKED monster_ogre (1 0 0) (-32 -32 -24) (32 32 64) Ambush
{
	model ("progs/ogre.mdl");
}
Ogre.
*/
/*QUAKED monster_demon1 (1 0 0) (-32 -32 -24) (32 32 64) Ambush
{
	model ("progs/demon.mdl");
}
Fiend.
*/
/*QUAKED monster_shambler (1 0 0) (-32 -32 -24) (32 32 64) Ambush
{
	model ("progs/shambler.mdl");
}
Shambler.
*/
/*QUAKED monster_knight (1 0 0) (-16 -16 -24) (16 16 40) Ambush
{
	model ("progs/knight.mdl");
}
Knight.
*/
/*QUAKED monster_army (1 0 0) (-16 -16 -24) (16 16 40) Ambush
{
	model ("progs/soldier.mdl");
}
Grunt.
*/
/*QUAKED monster_wizard (1 0 0) (-16 -16 -24) (16 16 40) Ambush
{
	model ("progs/wizard.mdl");
}
Scrag.
*/
/*QUAKED monster_dog (1 0 0) (-32 -32 -24) (32 32 40) Ambush
{
	model ("progs/dog.mdl");
}
Rottweiler.
*/
/*QUAKED monster_zombie (1 0 0) (-16 -16 -24) (16 16 32) Crucified Ambush Teleport X X X X X NOT_IN_EASY NOT_IN_NORMAL NOT_IN_HARD
{
	model ( {{ spawnflags & 2 -> { "path" : "progs/zombie.mdl", "frame" : 192 }, "progs/zombie.mdl" }} );
}
Zombie.
*/
/*QUAKED monster_boss (1 0 0) (-128 -128 -24) (128 128 256)
{
	model ("progs/boss.mdl");
}
Chthon.
*/
/*QUAKED event_lightning (0 1 1) (-8 -8 -8) (8 8 8)
Just for boss level.
*/
/*QUAKED monster_tarbaby (1 0 0) (-16 -16 -24) (16 16 24) Ambush
{
	model ("progs/tarbaby.mdl");
}
Spawn.
*/
/*QUAKED monster_hell_knight (1 0 0) (-16 -16 -24) (16 16 40) Ambush
{
	model ("progs/hknight.mdl");
}
Death knight.
*/
/*QUAKED monster_fish (1 0 0) (-16 -16 -24) (16 16 24) Ambush
{
	model ("progs/fish.mdl");
}
Rotfish.
*/
/*QUAKED monster_shalrath (1 0 0) (-32 -32 -24) (32 32 48) Ambush
{
	model ({ "path" : "progs/shalrath.mdl",	"frame": 23 });
}
Vore.
*/
/*QUAKED monster_enforcer (1 0 0) (-16 -16 -24) (16 16 40) Ambush
{
	model ("progs/enforcer.mdl");
}
Enforcer.
*/
/*QUAKED monster_oldone (1 0 0) (-128 -128 -24) (128 128 200)
{	model ("progs/oldone.mdl");		}
Shub-Niggurath.
*/
